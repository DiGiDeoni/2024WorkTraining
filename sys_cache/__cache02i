{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction to Object-Oriented Programming (OOP) in Python: Building a Simple Banking System\n",
    "Object-Oriented Programming (OOP) is a programming paradigm that uses objects and classes to model real-world entities and their interactions. OOP is particularly useful in building systems that involve managing and manipulating data because it provides a clear structure for organizing code, making it reusable, maintainable, and scalable.\n",
    "\n",
    "In this tutorial, we will explore the key OOP concepts necessary to build a simple Banking System in Python. This system involves creating customers, performing transactions (deposits and withdrawals), and maintaining bank accounts. We will focus only on the essential OOP concepts you need to understand to create this banking system.\n",
    "\n",
    "#### Key OOP Concepts Relevant to the Banking System\n",
    "The key OOP concepts that we will use are:\n",
    "- Classes and Objects\n",
    "- Attributes (Instance Variables)\n",
    "- Methods (Functions inside classes)\n",
    "- Encapsulation\n",
    "- Constructor (`__init__` method)\n",
    "\n",
    "Interacting between classes these concepts are enough to build a well-structured and functional banking system.\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1. Classes and Objects\n",
    "Classes are blueprints or templates for creating objects. An object is an instance of a class. In the real world, we can think of a class as a general template (e.g., \"Customer\") and an object as a specific realization of that template (e.g., a specific customer, such as Alice).\n",
    "\n",
    "In our banking system we can make:\n",
    "* Customer, Transaction, and BankAccount to be classes.\n",
    "* Each customer, like \"Alice\" or \"Bob,\" is an object (or instance) created from the Customer class.\n",
    "    \n",
    "Example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Customer: # notice the letter casing\n",
    "    def __init__(self, customer_id, name): # parameter self\n",
    "        self.customer_id = customer_id\n",
    "        self.name = name\n",
    "        self.balance = 0.0\n",
    "\n",
    "# Creating an object (instance) of the Customer class\n",
    "customer1 = Customer(\"001\", \"Alice\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2. Attributes (Instance Variables)\n",
    "Attributes (also called instance variables) store information or data related to an object. Each object can have different values for these attributes, even though they come from the same class.\n",
    "\n",
    "In the `Customer` class, the attributes are:\n",
    "* customer_id: Unique identifier for each customer.\n",
    "* name: The name of the customer.\n",
    "* balance: The amount of money in the customer’s account.\n",
    "Each time a customer is created, these attributes are assigned values specific to that customer.\n",
    "\n",
    "Example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Customer:\n",
    "    def __init__(self, customer_id, name):\n",
    "        self.customer_id = customer_id  # Attribute for storing customer ID\n",
    "        self.name = name                # Attribute for storing customer name\n",
    "        self.balance = 0.0              # Attribute for storing account balance (initialized to 0.0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3. Methods (Functions inside classes)\n",
    "Methods are functions that belong to a class and define the behavior of the objects. They allow objects to interact with or manipulate their own data (attributes). In our system, methods such as `deposit` and `withdraw` allow customers to interact with their bank accounts.\n",
    "\n",
    "In the `BankAccount` class, we define methods to:\n",
    "* Deposit money\n",
    "* Withdraw money\n",
    "\n",
    "Each method operates on the attributes of the object it's called on, allowing us to perform actions like updating balances.\n",
    "\n",
    "Example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class BankAccount:\n",
    "    def deposit(self, customer, amount):\n",
    "        if amount > 0:\n",
    "            customer.balance += amount\n",
    "            print(f\"Deposited ${amount:.2f}. New Balance: ${customer.balance:.2f}\")\n",
    "\n",
    "    def withdraw(self, customer, amount):\n",
    "        if amount <= customer.balance:\n",
    "            customer.balance -= amount\n",
    "            print(f\"Withdrew ${amount:.2f}. New Balance: ${customer.balance:.2f}\")\n",
    "        else:\n",
    "            print(\"Insufficient funds!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4. Encapsulation\n",
    "Encapsulation refers to bundling the data (attributes) and the methods that manipulate that data together within a class, hiding the complexity from the outside world. This makes the system easier to maintain and protects the internal state of an object.\n",
    "\n",
    "In our system, encapsulation ensures that all customer data (like their balance) is managed only through well-defined methods (like deposit and withdraw). This protects the balance from being modified directly from outside the class.\n",
    "\n",
    "For example, you cannot modify a customer’s balance directly; it must be done through the deposit or withdraw methods, which ensure the changes are valid."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 5. Constructor (`__init__` method)\n",
    "The constructor is a special method in Python, defined by `__init__()`, that is automatically called when a new object is created. It is used to initialize the attributes of the object.\n",
    "\n",
    "In our system, we can create the ff:\n",
    "* The `Customer` class constructor initializes a new customer with their ID, name, and an initial balance of 0.0.\n",
    "* The `Transaction` class constructor initializes the transaction details, such as the amount, type, and customer involved."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Transaction:\n",
    "    def __init__(self, transaction_id, customer_id, amount, transaction_type):\n",
    "        self.transaction_id = transaction_id\n",
    "        self.customer_id = customer_id\n",
    "        self.amount = amount\n",
    "        self.transaction_type = transaction_type\n",
    "\n",
    "    def __str__(self):\n",
    "        return f\"Transaction ID: {self.transaction_id}, Customer ID: {self.customer_id}, Amount: {self.amount}, Type: {self.transaction_type}\"\n",
    "\n",
    "\n",
    "# Creating a new transaction automatically calls the constructor\n",
    "some_transaction = Transaction(\"a1bc2321efg\", \"001\", '1000', 'Deposit')  # Calls __init__ and initializes Alice's data\n",
    "some_transaction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6. Interacting Between Classes\n",
    "One of the powerful aspects of OOP is how objects from different classes can interact. In our banking system, the `BankAccount` class interacts with the `Customer` class to update balances and create transaction records. The `CustomerDatabase` class manages the list of all customers and allows us to retrieve customers by their ID.\n",
    "\n",
    "We can make a system where:\n",
    "* The `BankAccount` class needs the Customer object to deposit and withdraw money.\n",
    "* The `Transaction` class logs each transaction, linking the transaction to a specific customer by their ID.\n",
    "\n",
    "Example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class BankAccount:\n",
    "    def __init__(self):\n",
    "        self.transactions = []\n",
    "\n",
    "    def deposit(self, customer, amount):\n",
    "        if amount <= 0:\n",
    "            print(\"Deposit amount must be positive!\")\n",
    "        else:\n",
    "            customer.balance += amount\n",
    "            transaction = Transaction(len(self.transactions) + 1, customer.customer_id, amount, 'Deposit')\n",
    "            self.transactions.append(transaction)\n",
    "            print(f\"Deposited ${amount} to {customer.name}'s account. New Balance: ${customer.balance:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this example, the deposit method of the `BankAccount` class takes a `Customer` object as an argument and modifies its balance. A new `Transaction` object is created to log the deposit."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Design of the Basic Banking System\n",
    "The design of this banking system follows a basic Object-Oriented Programming (OOP) structure. We represent the key entities involved in a banking system—customers, transactions, and accounts—using classes. Each of these classes handles different responsibilities, ensuring that the code is organized, scalable, and easy to understand.\n",
    "\n",
    "#### Key Classes:\n",
    "* `Customer`:\n",
    "    - Stores customer information like ID, name, and balance.\n",
    "    - Provides methods to display customer details.\n",
    "* `Transaction`:\n",
    "    - Represents a record of each deposit or withdrawal, including transaction ID, customer ID, amount, and transaction type.\n",
    "* `BankAccount`:\n",
    "    - Handles deposits, withdrawals, and logs transactions.\n",
    "    - Ensures that transactions are valid (e.g., only positive deposits, sufficient balance for withdrawals).\n",
    "* `CustomerDatabase`:\n",
    "    - Manages the collection of customers.\n",
    "    - Provides methods for adding new customers, retrieving customer details, and listing all customers.\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Flow of the Banking System\n",
    "* Customer Creation:\n",
    "    - New customers are added to the CustomerDatabase. Each customer is initialized with an ID, name, and a starting balance of 0.\n",
    "* Deposits:\n",
    "    - Users can select a customer and deposit money into their account. The system ensures the deposit amount is positive. The new balance is calculated, and a transaction record is created.\n",
    "* Withdrawals:\n",
    "    - Users can withdraw money from a customer's account if sufficient funds are available. If the withdrawal is valid, the customer's balance is updated, and a transaction is logged.\n",
    "* Transaction Log:\n",
    "    - The system maintains a log of all transactions—both deposits and withdrawals—which can be displayed upon request. Each log entry contains the transaction ID, customer ID, amount, and type of transaction.\n",
    "* Customer Management:\n",
    "    - Users can view a list of all customers and their details (ID, name, balance). They can also search for a specific customer using their ID."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Classes Overview\n",
    "OOP is essential when modeling entities in a banking system. Using Python classes, you can encapsulate data (e.g., customer balance) and behavior (e.g., deposit, withdraw) within objects.\n",
    "\n",
    "#### Key Concepts:\n",
    "* `Classes`: A blueprint for creating objects.\n",
    "* `__init__` method: Initializes a new object.\n",
    "* `self`: Refers to the current object instance. Used to refer to the object itself. It allows each object to maintain its own data, such as balance, without conflicting with other instances of the class.\n",
    "* Dot notation (`.`): Used to access attributes and methods of a class.\n",
    "\n",
    "We will be using three primary classes in this tutorial:\n",
    "\n",
    "* `Customer`: Represents a customer with a unique ID, name, and balance.\n",
    "* `Transaction`: Logs deposits and withdrawals for each customer.\n",
    "* `BankAccount`: Manages deposits, withdrawals, and keeps a record of all transactions.\n",
    "* `CustomerDatabase`: Manages customer information, allowing you to add new customers and retrieve them."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Step 1: Creating a Customer Class\n",
    "The `Customer` class will represent individual customers in the banking system. Each customer has an ID, name, and an initial balance set to zero."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Customer:\n",
    "    def __init__(self, customer_id, name):\n",
    "        self.customer_id = customer_id\n",
    "        self.name = name\n",
    "        self.balance = 0.0\n",
    "\n",
    "    def display_info(self):\n",
    "        return f\"Customer ID: {self.customer_id}, Name: {self.name}, Balance: {self.balance}\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* `__init__`: Initializes a new customer with an ID, name, and sets the balance to 0.\n",
    "* `display_info`: Returns a string with customer details."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Step 2: Managing Transactions\n",
    "The `Transaction` class will be used to store each deposit or withdrawal made by the customers. It includes the transaction ID, customer ID, amount, and type of transaction."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Transaction:\n",
    "    def __init__(self, transaction_id, customer_id, amount, transaction_type):\n",
    "        self.transaction_id = transaction_id\n",
    "        self.customer_id = customer_id\n",
    "        self.amount = amount\n",
    "        self.transaction_type = transaction_type\n",
    "\n",
    "    def __str__(self):\n",
    "        return f\"Transaction ID: {self.transaction_id}, Customer ID: {self.customer_id}, Amount: {self.amount}, Type: {self.transaction_type}\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* `__init__`: Creates a transaction, tracking its ID, customer ID, amount, and transaction type (Deposit/Withdrawal).\n",
    "* `__str__`: Converts the transaction details to a human-readable string."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Step 3: Managing Bank Accounts\n",
    "The `BankAccount` class handles customer deposits and withdrawals, and keeps a log of all transactions. It stores transactions in a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "class BankAccount:\n",
    "    def __init__(self):\n",
    "        self.transactions = []\n",
    "\n",
    "    def deposit(self, customer, amount):\n",
    "        if amount <= 0:\n",
    "            print(\"Deposit amount must be positive!\")\n",
    "        else:\n",
    "            customer.balance += amount\n",
    "            transaction = Transaction(len(self.transactions) + 1, customer.customer_id, amount, 'Deposit')\n",
    "            self.transactions.append(transaction)\n",
    "            print(f\"Deposited ${amount} to {customer.name}'s account. New Balance: ${customer.balance:.2f}\")\n",
    "\n",
    "    def withdraw(self, customer, amount):\n",
    "        if amount > customer.balance:\n",
    "            print(\"Insufficient funds!\")\n",
    "        else:\n",
    "            customer.balance -= amount\n",
    "            transaction = Transaction(len(self.transactions) + 1, customer.customer_id, amount, 'Withdrawal')\n",
    "            self.transactions.append(transaction)\n",
    "            print(f\"Withdrew ${amount} from {customer.name}'s account. New Balance: ${customer.balance:.2f}\")\n",
    "\n",
    "    def log_transactions(self):\n",
    "        if not self.transactions:\n",
    "            print(\"No transactions yet.\")\n",
    "        for transaction in self.transactions:\n",
    "            print(transaction)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* `deposit`: Adds money to the customer’s balance and logs the transaction.\n",
    "* `withdraw`: Removes money from the customer’s balance, unless they have insufficient funds.\n",
    "* `log_transactions`: Prints a log of all transactions made."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 4: Managing Customers\n",
    "The `CustomerDatabase` class is a simple database to manage multiple customers. It allows you to add customers and retrieve them by ID or list all customers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "class CustomerDatabase:\n",
    "    def __init__(self):\n",
    "        self.customers = []\n",
    "\n",
    "    def add_customer(self, customer):\n",
    "        self.customers.append(customer)\n",
    "        print(f\"Added: {customer.display_info()}\")\n",
    "\n",
    "    def get_all_customers(self):\n",
    "        return [customer.display_info() for customer in self.customers]\n",
    "\n",
    "    def get_customer_by_id(self, customer_id):\n",
    "        for customer in self.customers:\n",
    "            if customer.customer_id == customer_id:\n",
    "                return customer\n",
    "        return \"Customer not found.\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Step 5: Running the Banking System\n",
    "Now that we have all our classes set up, let's create a banking system that allows you to add customers, make deposits and withdrawals, and log transactions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example usage\n",
    "if __name__ == \"__main__\":\n",
    "    # Creating customer database\n",
    "    customer_db = CustomerDatabase()\n",
    "\n",
    "    # Creating a bank account instance\n",
    "    bank_account = BankAccount()\n",
    "\n",
    "    # Adding customers\n",
    "    customer_db.add_customer(Customer(\"001\", \"Alice\"))\n",
    "    customer_db.add_customer(Customer(\"002\", \"Bob\"))\n",
    "    customer_db.add_customer(Customer(\"003\", \"Charlie\"))\n",
    "\n",
    "    # Depositing money\n",
    "    bank_account.deposit(customer_db.customers[0], 1000)  # Deposit for Alice\n",
    "    bank_account.deposit(customer_db.customers[1], 500)   # Deposit for Bob\n",
    "\n",
    "    # Withdrawing money\n",
    "    bank_account.withdraw(customer_db.customers[0], 200)  # Withdraw for Alice\n",
    "    bank_account.withdraw(customer_db.customers[1], 700)  # Should show insufficient funds\n",
    "\n",
    "    # Logging transactions\n",
    "    print(\"\\nTransaction Log:\")\n",
    "    bank_account.log_transactions()\n",
    "\n",
    "    # Retrieving all customers\n",
    "    all_customers = customer_db.get_all_customers()\n",
    "    print(\"\\nAll Customers:\")\n",
    "    for customer_info in all_customers:\n",
    "        print(customer_info)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Summary\n",
    "* We learned about the basics of Python\n",
    "    - data types\n",
    "    - conditional statements\n",
    "    - control structures\n",
    "    - function creation\n",
    "* We’ve built a basic banking system using Python’s OOP features.\n",
    "* We learned how to manage customers, perform deposits/withdrawals, and log transactions."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
