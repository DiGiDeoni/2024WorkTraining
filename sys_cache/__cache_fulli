{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Complete Python Tutorial for Banking Analysts: OOP and Data Visualization\n",
    "\n",
    "## Session 1: Python Essentials and OOP in Banking Systems\n",
    "\n",
    "---\n",
    "\n",
    "### 1. Introduction to Python in Banking\n",
    "\n",
    "Python is increasingly being adopted in the banking sector due to its simplicity, readability, and powerful libraries that facilitate automation and data analysis. By automating repetitive tasks and utilizing data visualization, banking analysts can streamline their work processes, leading to more efficient decision-making.\n",
    "\n",
    "### 2. Python Essentials Refresher\n",
    "\n",
    "Before diving into OOP, let's review some essential Python concepts with examples:\n",
    "\n",
    "- **Loading Modules**:  \n",
    "  Python allows you to use external libraries through modules. To load a module, you can use the `import` statement.\n",
    "\n",
    "  **Example**:\n",
    "\n",
    "  ```python\n",
    "  import math  # Loads the math module\n",
    "  print(math.sqrt(16))  # Outputs: 4.0\n",
    "  ```  \n",
    "\n",
    "- **Data Types**:  \n",
    "  - **Integers**: Whole numbers, e.g., `42`  \n",
    "  - **Floats**: Decimal numbers, e.g., `3.14`  \n",
    "  - **Strings**: Text data, e.g., `\"Hello, World!\"`  \n",
    "  - **Lists**: Ordered collections, e.g., `[1, 2, 3]`\n",
    "\n",
    "  **Example**:\n",
    "\n",
    "  ```python\n",
    "  account_balance = 1000  # Integer\n",
    "  interest_rate = 0.05  # Float\n",
    "  customer_name = \"Alice\"  # String\n",
    "  transaction_history = [100, -50, 200]  # List of transactions\n",
    "  ```  \n",
    "\n",
    "- **Control Structures**:  \n",
    "  - **If Statements**: Used for decision-making.  \n",
    "  - **For Loops**: Used for iterating over a sequence.  \n",
    "  - **While Loops**: Used for repeated execution as long as a condition is true.\n",
    "\n",
    "  **Examples**:\n",
    "\n",
    "  ```python\n",
    "  # If Statement\n",
    "  if account_balance > 0:\n",
    "      print(\"Account is positive.\")\n",
    "  \n",
    "  # For Loop\n",
    "  for transaction in transaction_history:\n",
    "      print(f\"Transaction: {transaction}\")\n",
    "  \n",
    "  # While Loop\n",
    "  counter = 0\n",
    "  while counter < 5:\n",
    "      print(f\"Counter: {counter}\")\n",
    "      counter += 1\n",
    "  ```  \n",
    "\n",
    "### 3. Object-Oriented Programming (OOP) Concepts\n",
    "\n",
    "OOP is a programming paradigm that utilizes objects to represent real-world entities. Key concepts include:\n",
    "\n",
    "- **Classes and Objects**: A class is a blueprint for creating objects. An object is an instance of a class.\n",
    "\n",
    "  **Example**:\n",
    "\n",
    "  ```python\n",
    "  import time\n",
    "  \n",
    "  class Customer:\n",
    "      def __init__(self, name, age, account_balance=0):\n",
    "          self.name = name  # Initializing instance variable\n",
    "          self.age = age\n",
    "          self.account_balance = account_balance\n",
    "          self.transaction_log = []  # List to hold transaction logs\n",
    "  \n",
    "      def deposit(self, amount):\n",
    "          if amount > 0:\n",
    "              self.account_balance += amount\n",
    "              self.log_transaction('deposit', amount)\n",
    "          else:\n",
    "              print(\"Deposit amount must be positive.\")\n",
    "\n",
    "      def withdraw(self, amount):\n",
    "          if amount > 0 and amount <= self.account_balance:\n",
    "              self.account_balance -= amount\n",
    "              self.log_transaction('withdraw', amount)\n",
    "          else:\n",
    "              print(\"Insufficient balance or invalid amount.\")\n",
    "\n",
    "      def log_transaction(self, transaction_type, amount):\n",
    "          transaction_time = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())\n",
    "          self.transaction_log.append({\n",
    "              'type': transaction_type,\n",
    "              'amount': amount,\n",
    "              'date': transaction_time\n",
    "          })\n",
    "\n",
    "      def print_transaction_log(self):\n",
    "          print(f\"Transaction history for {self.name}:\")\n",
    "          for transaction in self.transaction_log:\n",
    "              print(f\"{transaction['date']} - {transaction['type']} of ${transaction['amount']}\")\n",
    "\n",
    "  # Example usage\n",
    "  customer = Customer(\"Alice\", 30)\n",
    "  customer.deposit(500)\n",
    "  customer.withdraw(200)\n",
    "  customer.print_transaction_log()\n",
    "  ```\n",
    "\n",
    "### 4. Classes vs. Normal Function Declaration\n",
    "\n",
    "- **Classes**: Encapsulate both data (attributes) and functions (methods) together. They promote reusability and help in managing complexity by grouping related functionalities.\n",
    "\n",
    "- **Functions**: Standalone blocks of code designed to perform a specific task. They do not encapsulate data, making it harder to manage state across multiple functions.\n",
    "\n",
    "  **Example**:\n",
    "\n",
    "  ```python\n",
    "  # Sequential code to manage customer transactions\n",
    "  customer_name = \"Alice\"\n",
    "  account_balance = 1000\n",
    "\n",
    "  def deposit(amount):\n",
    "      global account_balance\n",
    "      account_balance += amount\n",
    "\n",
    "  def withdraw(amount):\n",
    "      global account_balance\n",
    "      if amount <= account_balance:\n",
    "          account_balance -= amount\n",
    "\n",
    "  deposit(500)\n",
    "  withdraw(200)\n",
    "  print(f\"{customer_name}'s balance: {account_balance}\")\n",
    "  ```\n",
    "\n",
    "In summary, classes offer a structured way to manage related data and functionalities, while functions are better suited for simpler tasks.\n",
    "\n",
    "### 5. OOP vs. Sequential Programming\n",
    "\n",
    "- **Object-Oriented Programming (OOP)**: Organizes code into objects that combine data and behavior. This paradigm is ideal for managing complex systems, as it promotes encapsulation, inheritance, and polymorphism, allowing for cleaner and more maintainable code.\n",
    "\n",
    "- **Sequential Programming**: Involves writing a linear sequence of instructions. Each step is executed in order, which can lead to code that is harder to maintain as complexity grows. It generally lacks the modularity and reusability offered by OOP.\n",
    "\n",
    "In summary, OOP provides better tools for managing complexity through encapsulation and modularity, while sequential programming can become cumbersome as the size of the project increases.\n",
    "\n",
    "### 6. Building a Simple Banking System\n",
    "\n",
    "Now, letâ€™s build a basic banking system using OOP principles. We will define a `Customer` class to handle banking operations.\n",
    "\n",
    "```python\n",
    "import time\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "class Customer:\n",
    "    def __init__(self, name, age, account_balance=0):\n",
    "        self.name = name\n",
    "        self.age = age\n",
    "        self.account_balance = account_balance\n",
    "        self.transaction_log = []\n",
    "\n",
    "    def deposit(self, amount):\n",
    "        if amount > 0:\n",
    "            self.account_balance += amount\n",
    "            self.log_transaction('deposit', amount)\n",
    "        else:\n",
    "            print(\"Deposit amount must be positive.\")\n",
    "\n",
    "    def withdraw(self, amount):\n",
    "        if amount > 0 and amount <= self.account_balance:\n",
    "            self.account_balance -= amount\n",
    "            self.log_transaction('withdraw', amount)\n",
    "        else:\n",
    "            print(\"Insufficient balance or invalid amount.\")\n",
    "\n",
    "    def log_transaction(self, transaction_type, amount):\n",
    "        transaction_time = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())\n",
    "        self.transaction_log.append({\n",
    "            'type': transaction_type,\n",
    "            'amount': amount,\n",
    "            'date': transaction_time\n",
    "        })\n",
    "\n",
    "    def print_transaction_log(self):\n",
    "        print(f\"Transaction history for {self.name}:\")\n",
    "        for transaction in self.transaction_log:\n",
    "            print(f\"{transaction['date']} - {transaction['type']} of ${transaction['amount']}\")\n",
    "\n",
    "# Example usage\n",
    "customer = Customer(\"Alice\", 30)\n",
    "customer.deposit(500)\n",
    "customer.withdraw(200)\n",
    "customer.print_transaction_log()\n",
    "```  \n",
    "\n",
    "### 7. Best Practices in Python Programming\n",
    "\n",
    "- **Code Readability**: Write clear and understandable code by using meaningful variable and function names.\n",
    "  \n",
    "  **Example**:\n",
    "  ```python\n",
    "  def calculate_interest(principal, rate, time):\n",
    "      return principal * rate * time\n",
    "  ```\n",
    "\n",
    "- **Commenting and Documentation**: Include comments and docstrings to explain the purpose and functionality of code sections.\n",
    "  \n",
    "  **Example**:\n",
    "  ```python\n",
    "  def deposit(amount):\n",
    "      \"\"\"\n",
    "      Deposit money into the account.\n",
    "      \n",
    "      Parameters:\n",
    "      amount (float): The amount to deposit.\n",
    "      \"\"\"\n",
    "      if amount > 0:\n",
    "          self.account_balance += amount\n",
    "          self.log_transaction('deposit', amount)\n",
    "  ```\n",
    "\n",
    "- **Error Handling**: Implement error handling to manage exceptions gracefully.\n",
    "  \n",
    "  **Example**:\n",
    "  ```python\n",
    "  try:\n",
    "      customer.withdraw(500)\n",
    "  except Exception as e:\n",
    "      print(f\"An error occurred: {e}\")\n",
    "  ```\n",
    "\n",
    "- **Test Your Code**: Regularly test individual components and the overall system to catch and fix bugs early.\n",
    "  \n",
    "  **Example**:\n",
    "  ```python\n",
    "  def test_deposit():\n",
    "      customer = Customer(\"Alice\", 30, 1000)\n",
    "      customer.deposit(500)\n",
    "      assert customer.account_balance == 1500, \"Deposit function failed!\"\n",
    "  \n",
    "  test_deposit()  # Running the test\n",
    "  ```\n",
    "\n",
    "### 8. Exercises for Session 1\n",
    "\n",
    "1. **Create a customer instance** and perform multiple deposits and withdrawals.\n",
    "2. **Log transactions** and print the transaction history.\n",
    "\n",
    "### 9. Exercise Answers for Session 1\n",
    "\n",
    "1. **Creating a customer instance**:\n",
    "   ```python\n",
    "   customer = Customer(\"Bob\", 25)\n",
    "   customer.deposit(1000)\n",
    "   customer.withdraw(300)\n",
    "   customer.print_transaction_log()\n",
    "   ```\n",
    "\n",
    "2. **Logging transactions**:\n",
    "   The transaction log will automatically record the deposits and withdrawals through the `log_transaction` method, which was called in the deposit and withdrawal methods.\n",
    "\n",
    "### 10. Further Reading and Resources\n",
    "\n",
    "- **Books**:\n",
    "  - \"Python Crash Course\" by Eric Matthes\n",
    "  - \"Automate the Boring Stuff with Python\" by Al Sweigart\n",
    "\n",
    "- **Online Courses**:\n",
    "  - [Coursera: Python for Everybody](https://www.coursera.org/specializations/python)\n",
    "  - [edX: Introduction to Computer Science and Programming Using Python](https://www.edx.org/course/introduction-to-computer-science-and-programming-using-python)\n",
    "\n",
    "- **Documentation**:\n",
    "  - [Python Official Documentation](https://docs.python.org/3/)\n",
    "  - [Matplotlib Documentation](https://matplotlib.org/stable/contents.html)\n",
    "\n",
    "- **Communities**:\n",
    "  - [Stack Overflow](https://stackoverflow.com/) - A great place to ask questions and find answers.\n",
    "  - [Reddit - Learn Python](https://www.reddit.com/r/learnpython/) - A community for Python learners.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "## Session 2: Advanced OOP Concepts and Data Visualization\n",
    "\n",
    "---\n",
    "\n",
    "### 1. Advanced OOP in Banking Systems\n",
    "\n",
    "In this session, weâ€™ll explore more advanced OOP concepts such as inheritance and polymorphism, which will help us enhance our banking system.\n",
    "\n",
    "### 2. Inheritance in Banking Systems\n",
    "\n",
    "We can create a specialized customer class for business accounts using inheritance.\n",
    "\n",
    "```python\n",
    "class BusinessCustomer(Customer):\n",
    "    def __init__(self, name, age, account_balance=0, overdraft_limit=1000):\n",
    "        super().__init__(name, age, account_balance)\n",
    "        self.overdraft_limit = overdraft_limit\n",
    "\n",
    "    def withdraw(self, amount):\n",
    "        if amount > 0 and amount <= (self.account_balance + self.overdraft_limit):\n",
    "            self.account_balance -= amount\n",
    "            self.log_transaction('withdraw', amount)\n",
    "        else:\n",
    "            print(\"Amount exceeds overdraft limit.\")\n",
    "\n",
    "# Example usage\n",
    "business_customer = BusinessCustomer(\"Tech Corp\", 10, account_balance=2000)\n",
    "business_customer.withdraw(2500)  # Should succeed due to overdraft limit\n",
    "business_customer.print_transaction_log()\n",
    "```\n",
    "\n",
    "### 3. Polymorphism in Banking Systems\n",
    "\n",
    "Continuing from our previous discussion, we can utilize polymorphism to create a variety of payment methods.\n",
    "\n",
    "```python\n",
    "class Payment:\n",
    "    def make_payment(self):\n",
    "        raise NotImplementedError(\"This method should be overridden.\")\n",
    "\n",
    "class CreditCardPayment(Payment):\n",
    "    def make_payment(self):\n",
    "        print(\"Payment made using credit card.\")\n",
    "\n",
    "class PayPalPayment(Payment):\n",
    "    def make_payment(self):\n",
    "        print(\"Payment made using PayPal.\")\n",
    "\n",
    "# Using polymorphism\n",
    "payments = [CreditCardPayment(), PayPalPayment()]\n",
    "for payment in payments:\n",
    "    payment.make_payment()  # Calls the appropriate method based on the object\n",
    "```\n",
    "\n",
    "### 4. Importance of Visualization in Business Analysis\n",
    "\n",
    "Visualization plays a crucial role in business analysis by transforming complex data into understandable graphics. It helps analysts identify trends, patterns, and anomalies in financial data, which aids in informed decision-making.\n",
    "\n",
    "- **Proper Visualization Techniques**:\n",
    "  - **Bar Charts**: Effective for comparing quantities across different categories.\n",
    "  - **Line Graphs**: Ideal for showing trends over time.\n",
    "  - **Pie Charts**: Useful for displaying proportions of a whole.\n",
    "\n    **Example of Bar Chart**:\n",
    "    ```python\n",
    "    categories = ['Deposits', 'Withdrawals']\n",
    "    amounts = [sum(t['amount'] for t in customer.transaction_log if t['type'] == 'deposit'),\n",
    "               sum(t['amount'] for t in customer.transaction_log if t['type'] == 'withdraw')]\n",
    "    plt.bar(categories, amounts)\n",
    "    plt.title('Customer Transactions')\n",
    "    plt.ylabel('Amount')\n",
    "    plt.show()\n",
    "    ```\n",
    "\n    **Example of Line Graph**:\n",
    "    ```python\n",
    "    times = [t['date'] for t in customer.transaction_log]\n",
    "    balances = [customer.account_balance] * len(times)\n",
    "    plt.plot(times, balances)\n",
    "    plt.title('Account Balance Over Time')\n",
    "    plt.xlabel('Time')\n",
    "    plt.ylabel('Balance')\n",
    "    plt.show()\n",
    "    ```\n",
    "\n### 5. Code for Visualization in Banking Systems\n",
    "\n",
    "Bringing together the concepts weâ€™ve discussed, let's visualize customer transactions and account balances.\n",
    "\n",
    "```python\n",
    "# Using customer instance from earlier\n",
    "def visualize_transactions(customer):\n",
    "    # Prepare data for visualization\n",
    "    categories = ['Deposits', 'Withdrawals']\n",
    "    amounts = [sum(t['amount'] for t in customer.transaction_log if t['type'] == 'deposit'),\n",
    "               sum(t['amount'] for t in customer.transaction_log if t['type'] == 'withdraw')]\n",
    "    \n",
    "    # Bar chart\n",
    "    plt.bar(categories, amounts)\n",
    "    plt.title(f'Transactions for {customer.name}')\n",
    "    plt.ylabel('Amount')\n",
    "    plt.show()\n",
    "    \n",
    "    # Prepare data for line graph\n",
    "    times = [t['date'] for t in customer.transaction_log]\n",
    "    balances = [customer.account_balance] * len(times)\n",
    "    \n",
    "    # Line graph\n",
    "    plt.plot(times, balances)\n",
    "    plt.title(f'Account Balance Over Time for {customer.name}')\n",
    "    plt.xlabel('Time')\n",
    "    plt.ylabel('Balance')\n",
    "    plt.show()\n",
    "\n",
    "# Example usage\n",
    "visualize_transactions(customer)\n",
    "```\n",
    "\n### 6. Exercises for Session 2\n",
    "\n1. **Create a BusinessCustomer instance** and perform deposits/withdrawals, ensuring to test overdraft functionality.\n",
    "2. **Implement a new payment method** that can be added to the existing structure and visualize transactions.\n",
    "\n### 7. Exercise Answers for Session 2\n",
    "\n1. **Creating a BusinessCustomer instance**:\n",
    "   ```python\n",
    "   business_customer = BusinessCustomer(\"Tech Corp\", 10, account_balance=3000)\n",
    "   business_customer.withdraw(3500)  # Should succeed due to overdraft limit\n",
    "   business_customer.print_transaction_log()\n",
    "   ```\n",
    "\n2. **Implementing a new payment method**:\n",
    "   To implement a new payment method, define a new class that inherits from `Payment` and override `make_payment` method.\n",
    "   ```python\n",
    "   class BankTransferPayment(Payment):\n",
    "       def make_payment(self):\n",
    "           print(\"Payment made using bank transfer.\")\n",
    "   ```\n",
    "\n### 8. Further Reading and Resources\n",
    "\n- **Books**:\n",
    "  - \"Fluent Python\" by Luciano Ramalho\n",
    "  - \"Python Data Science Handbook\" by Jake VanderPlas\n",
    "\n- **Online Resources**:\n",
    "  - [Towards Data Science](https://towardsdatascience.com/) - Great blog with articles on Python and data visualization.\n",
    "  - [Matplotlib Gallery](https://matplotlib.org/stable/gallery/index.html) - A collection of examples of Matplotlib usage.\n",
    "\n- **YouTube Channels**:\n",
    "  - Corey Schafer - Offers excellent Python tutorials.\n",
    "  - sentdex - Great resource for learning Python for finance and machine learning.\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
