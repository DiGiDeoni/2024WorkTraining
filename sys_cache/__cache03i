{"cells":[{"cell_type":"markdown","metadata":{},"source":["## Python OOP in Banking: An Example"]},{"cell_type":"markdown","metadata":{},"source":["## Key Concepts:\n","\n","1. What is OOP?\n","    - Introduce classes, objects, methods, and attributes.\n","    - Differentiate between a class and a function:\n","        - A **function** is a reusable block of code for a specific task.\n","        - A **class** is a blueprint for creating objects (instances), which can have methods (functions inside classes) and attributes (data stored inside objects).   \n","2. Simple Class Example:\n","    - A simple class structure to represent a banking customer.  "]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["# Creating a simple Customer class\n","class Customer:\n","    def __init__(self, name, age):\n","        self.name = name\n","        self.age = age\n","        self.balance = 0\n","    \n","    def deposit(self, amount):\n","        self.balance += amount\n","        print(f\"{self.name} deposited ${amount}. New balance is ${self.balance}.\")"]},{"cell_type":"markdown","metadata":{},"source":["3. Dot Operator:\n","    - The dot (.) operator is used to access attributes and methods in an object.\n","Example in Code:"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["# Creating an object of the Customer class\n","customer1 = Customer(\"John Doe\", 30)\n","customer1.deposit(500)  # Using the dot operator to call a method"]},{"cell_type":"markdown","metadata":{},"source":["### Banking System Design Overview\n","Our goal is to build a simple banking system using Pythonâ€™s OOP features. The system will involve multiple classes to simulate basic banking operations like deposits, withdrawals, and transaction logging.\n","\n","### High-Level Design\n","* `Customer` Class: Stores customer information (ID, name, and balance).\n","* `BankAccount` Class: Manages customer transactions and keeps a log of all operations.\n","* `Transaction` Class: Represents each transaction, including deposits and withdrawals.\n","* `CustomerDatabase` Class: Holds all customer information in a simple database."]},{"cell_type":"markdown","metadata":{},"source":["### Class Breakdown\n","* **Customer Class**:\n","    - Holds customer details such as customer_id, name, and balance.\n","    - Includes a method `display_info()` to show customer details.\n","* **Transaction Class**:\n","    - Represents a financial transaction (deposit or withdrawal).\n","    - Stores transaction details: transaction_id, customer_id, amount, and transaction_type.\n","    - The `__str__` method formats transaction details for easy printing.\n","* **BankAccount Class**:\n","    - Manages customer deposits, withdrawals, and logs transactions.\n","    - The deposit method ensures only positive amounts are accepted.\n","    - The withdraw method checks for sufficient funds and logs withdrawals.\n","    - Keeps track of all transactions in a list.\n","* **CustomerDatabase Class**:\n","    - Stores all customers in a list.\n","    - Provides methods to add customers, retrieve all customers, and search for a customer by ID."]},{"cell_type":"markdown","metadata":{},"source":["## Insert Banking System Code Below"]},{"cell_type":"code","execution_count":14,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["Added: Customer ID: 001, Name: Alice, Balance: 0.0\n","Added: Customer ID: 002, Name: Bob, Balance: 0.0\n","Added: Customer ID: 003, Name: Charlie, Balance: 0.0\n","Deposited 1000 to Alice's account. New Balance: 1000.0\n","Deposited 500 to Bob's account. New Balance: 500.0\n","Withdrew 200 from Alice's account. New Balance: 800.0\n","Insufficient funds!\n","\n","Transaction Log:\n","Transaction ID: 1, Customer ID: 001, Amount: 1000, Type: Deposit\n","Transaction ID: 2, Customer ID: 002, Amount: 500, Type: Deposit\n","Transaction ID: 3, Customer ID: 001, Amount: 200, Type: Withdrawal\n","\n","All Customers:\n","Customer ID: 001, Name: Alice, Balance: 800.0\n","Customer ID: 002, Name: Bob, Balance: 500.0\n","Customer ID: 003, Name: Charlie, Balance: 0.0\n"]}],"source":["class Customer:\n","    def __init__(self, customer_id, name):\n","        self.customer_id = customer_id\n","        self.name = name\n","        self.balance = 0.0\n","\n","    def display_info(self):\n","        return f\"Customer ID: {self.customer_id}, Name: {self.name}, Balance: {self.balance}\"\n","\n","\n","class Transaction:\n","    def __init__(self, transaction_id, customer_id, amount, transaction_type):\n","        self.transaction_id = transaction_id\n","        self.customer_id = customer_id\n","        self.amount = amount\n","        self.transaction_type = transaction_type\n","\n","    def __str__(self):\n","        return f\"Transaction ID: {self.transaction_id}, Customer ID: {self.customer_id}, Amount: {self.amount}, Type: {self.transaction_type}\"\n","\n","\n","class BankAccount:\n","    def __init__(self):\n","        self.transactions = []\n","\n","    def deposit(self, customer, amount):\n","        customer.balance += amount\n","        transaction = Transaction(len(self.transactions) + 1, customer.customer_id, amount, 'Deposit')\n","        self.transactions.append(transaction)\n","        print(f\"Deposited {amount} to {customer.name}'s account. New Balance: {customer.balance}\")\n","\n","    def withdraw(self, customer, amount):\n","        if amount > customer.balance:\n","            print(\"Insufficient funds!\")\n","        else:\n","            customer.balance -= amount\n","            transaction = Transaction(len(self.transactions) + 1, customer.customer_id, amount, 'Withdrawal')\n","            self.transactions.append(transaction)\n","            print(f\"Withdrew {amount} from {customer.name}'s account. New Balance: {customer.balance}\")\n","\n","    def log_transactions(self):\n","        for transaction in self.transactions:\n","            print(transaction)\n","\n","\n","class CustomerDatabase:\n","    def __init__(self):\n","        self.customers = []\n","\n","    def add_customer(self, customer):\n","        self.customers.append(customer)\n","        print(f\"Added: {customer.display_info()}\")\n","\n","    def get_all_customers(self):\n","        return [customer.display_info() for customer in self.customers]\n","\n","    def get_customer_by_id(self, customer_id):\n","        for customer in self.customers:\n","            if customer.customer_id == customer_id:\n","                return customer.display_info()\n","        return \"Customer not found.\"\n","\n","\n","# Example usage\n","if __name__ == \"__main__\":\n","    # Creating customer database\n","    customer_db = CustomerDatabase()\n","\n","    # Creating a bank account instance\n","    bank_account = BankAccount()\n","\n","    # Adding customers\n","    customer_db.add_customer(Customer(\"001\", \"Alice\"))\n","    customer_db.add_customer(Customer(\"002\", \"Bob\"))\n","    customer_db.add_customer(Customer(\"003\", \"Charlie\"))\n","\n","    # Depositing money\n","    bank_account.deposit(customer_db.customers[0], 1000)  # Deposit for Alice\n","    bank_account.deposit(customer_db.customers[1], 500)   # Deposit for Bob\n","\n","    # Withdrawing money\n","    bank_account.withdraw(customer_db.customers[0], 200)  # Withdraw for Alice\n","    bank_account.withdraw(customer_db.customers[1], 700)  # Should show insufficient funds\n","\n","    # Logging transactions\n","    print(\"\\nTransaction Log:\")\n","    bank_account.log_transactions()\n","\n","    # Retrieving all customers\n","    all_customers = customer_db.get_all_customers()\n","    print(\"\\nAll Customers:\")\n","    for customer_info in all_customers:\n","        print(customer_info)\n"]},{"cell_type":"markdown","metadata":{},"source":["## Best Practices in Python Programming\n","\n","- **Code Readability**: Write clear and understandable code by using meaningful variable and function names.\n","  \n","  **Example**:\n","  ```python\n","  def calculate_interest(principal, rate, time):\n","      return principal * rate * time\n","  ```\n","\n","- **Commenting and Documentation**: Include comments and docstrings to explain the purpose and functionality of code sections.\n","  \n","  **Example**:\n","  ```python\n","  def deposit(self,amount):\n","      \"\"\"\n","      Deposit money into the account.\n","      \n","      Parameters:\n","      amount (float): The amount to deposit.\n","      \"\"\"\n","      if amount > 0:\n","          self.account_balance += amount\n","          self.log_transaction('deposit', amount)\n","  ```\n","\n","- **Error Handling**: Implement error handling to manage exceptions gracefully.\n","  \n","  **Example**:\n","  ```python\n","  try:\n","      customer.withdraw(500)\n","  except Exception as e:\n","      print(f\"An error occurred: {e}\")\n","  ```\n","\n","- **Test Your Code**: Regularly test individual components and the overall system to catch and fix bugs early.\n","  \n","  **Example**:\n","  ```python\n","  def test_deposit():\n","      customer = Customer(\"Alice\", 30, 1000)\n","      customer.deposit(500)\n","      assert customer.account_balance == 1500, \"Deposit function failed!\"\n","  \n","  test_deposit()  # Running the test\n","  ```"]},{"cell_type":"markdown","metadata":{},"source":["## Data Visualization with Matplotlib\n","Now that we have the banking system set up, we can use `Matplotlib` to visualize customer balances. Data visualization is a key component in banking, as it helps identify trends, monitor financial health, and provide insights for decision-making."]},{"cell_type":"markdown","metadata":{},"source":["### **Visualization Techniques**\n","Effective data visualization is crucial for business analysis. The right visualization helps in understanding complex data easily.\n","\n","### **Bar Chart**\n","Bar charts are useful for comparing different categories."]},{"cell_type":"code","execution_count":15,"metadata":{},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":["import matplotlib.pyplot as plt\n","\n","transactions = ['Deposit', 'Withdrawal', 'Transfer']\n","amounts = [1000, 500, 300]\n","\n","plt.bar(transactions, amounts)\n","plt.title('Transaction Types')\n","plt.xlabel('Type')\n","plt.ylabel('Amount')\n","plt.show()"]},{"cell_type":"markdown","metadata":{},"source":["### **2.3 Line Chart**\n","Line charts can help track trends over time."]},{"cell_type":"code","execution_count":16,"metadata":{},"outputs":[{"data":{"image/png":"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","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":["days = ['Day 1', 'Day 2', 'Day 3','Day 4', 'Day 5', 'Day 6', 'Day 7']\n","balances = [300, 800, 900, 1000, 950, 1200, 2000]\n","\n","plt.plot(days, balances)\n","plt.title('Balance Over Time')\n","plt.xlabel('Day')\n","plt.ylabel('Balance')\n","plt.show()"]},{"cell_type":"markdown","metadata":{},"source":["### **Pie Chart**\n","Pie charts can show the proportion of different transaction types."]},{"cell_type":"code","execution_count":17,"metadata":{},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["transaction_types = ['Deposit', 'Withdrawal', 'Transfer']\n","amounts = [1000, 500, 300]\n","\n","plt.pie(amounts, labels=transaction_types, autopct='%1.1f%%')\n","plt.title('Transaction Proportions')\n","plt.show()"]},{"cell_type":"markdown","metadata":{},"source":["### **Creating a Simple Bar Chart for Customer Balances**\n","In this example, weâ€™ll use the customer balances from our banking system and plot them in a bar chart.\n","\n","### Steps to Create the Bar Chart:\n","1. Import `matplotlib.pyplot` as `plt`.\n","1. Extract customer names and balances from the `CustomerDatabase`.\n","1. Use `plt.bar()` to create the bar chart.\n","1. Add titles and labels to enhance the visualization.\n","1. Display the chart using `plt.show()`."]},{"cell_type":"code","execution_count":18,"metadata":{},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":["import matplotlib.pyplot as plt\n","\n","# Data for visualization\n","customers = customer_db.customers\n","names = [customer.name for customer in customers]\n","balances = [customer.balance for customer in customers]\n","\n","# Creating the bar chart\n","plt.bar(names, balances)\n","plt.title(\"Customer Balances\")\n","plt.xlabel(\"Customers\")\n","plt.ylabel(\"Balance\")\n","plt.show()"]},{"cell_type":"markdown","metadata":{},"source":["#### Explanation:\n","1. `names`: A list comprehension that extracts customer names.\n","1. `balances`: A list comprehension that extracts customer balances.\n","1. `plt.bar()`: Plots the names on the x-axis and balances on the y-axis.\n","1. `plt.title()`, `plt.xlabel()`, `plt.ylabel()`: Add titles and labels to make the chart more readable.\n","1. `plt.show()`: Displays the plot in the output window."]},{"cell_type":"markdown","metadata":{},"source":["### Exercise: Enhance the Visualization\n","1. Modify the bar chart to display the bars in different colors for each customer.\n","1. Create a pie chart that shows the proportion of each customer's balance relative to the total balance of all customers.\n","1. Use the `plt.savefig()` function to save the chart as an image file (`.png` or `.jpg`)."]},{"cell_type":"code","execution_count":19,"metadata":{},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":["# Enhancing the bar chart with custom colors\n","colors = ['blue', 'green', 'red']\n","plt.bar(names, balances, color=colors)\n","plt.title(\"Customer Balances with Custom Colors\")\n","plt.xlabel(\"Customers\")\n","plt.ylabel(\"Balance\")\n","plt.show()"]},{"cell_type":"code","execution_count":20,"metadata":{},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["import matplotlib.pyplot as plt\n","\n","# Data for visualization\n","customers = customer_db.customers\n","names = [customer.name for customer in customers]\n","balances = [customer.balance for customer in customers]\n","\n","# Creating the pie chart\n","plt.pie(balances, labels=names, autopct='%1.1f%%', startangle=140)\n","plt.title(\"Customer Balances as Proportions\")\n","plt.show()"]},{"cell_type":"code","execution_count":21,"metadata":{},"outputs":[{"data":{"image/png":"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","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":["import matplotlib.pyplot as plt\n","\n","# Data for visualization\n","customers = customer_db.customers\n","names = [customer.name for customer in customers]\n","balances = [customer.balance for customer in customers]\n","\n","# Creating the bar chart\n","plt.bar(names, balances)\n","plt.title(\"Customer Balances\")\n","plt.xlabel(\"Customers\")\n","plt.ylabel(\"Balance\")\n","\n","# Saving the plot as an image file\n","plt.savefig('customer_balances_chart.png')\n","\n","# Displaying the chart\n","plt.show()"]},{"cell_type":"markdown","metadata":{},"source":["### Additional Exercises:\n","1. #### Add a method in the `BankAccount` class to generate a bar chart after every transaction showing the updated balances.\n","2. #### Use a line chart to track the balance changes of a specific customer after each transaction.\n","3. #### Create a scatter plot showing the number of transactions vs. the total balance for each customer."]},{"cell_type":"code","execution_count":23,"metadata":{},"outputs":[],"source":["import matplotlib.pyplot as plt\n","\n","class BankAccount:\n","    def __init__(self):\n","        self.transactions = []\n","\n","    def deposit(self, customer, amount):\n","        if amount > 0:\n","            customer.balance += amount\n","            transaction = Transaction(len(self.transactions) + 1, customer.customer_id, amount, 'Deposit')\n","            self.transactions.append(transaction)\n","            print(f\"Deposited {amount} to {customer.name}'s account. New Balance: {customer.balance}\")\n","            self.plot_balances()  # Call the new method after each transaction\n","        else:\n","            print(\"Deposit amount must be positive!\")\n","\n","    def withdraw(self, customer, amount):\n","        if amount > customer.balance:\n","            print(\"Insufficient funds!\")\n","        elif amount <= 0:\n","            print(\"Withdrawal amount must be positive!\")\n","        else:\n","            customer.balance -= amount\n","            transaction = Transaction(len(self.transactions) + 1, customer.customer_id, amount, 'Withdrawal')\n","            self.transactions.append(transaction)\n","            print(f\"Withdrew {amount} from {customer.name}'s account. New Balance: {customer.balance}\")\n","            self.plot_balances()  # Call the new method after each transaction\n","\n","    def plot_balances(self):\n","        # Plotting customer balances after each transaction\n","        customers = customer_db.customers\n","        names = [customer.name for customer in customers]\n","        balances = [customer.balance for customer in customers]\n","\n","        plt.bar(names, balances)\n","        plt.title(\"Customer Balances After Transaction\")\n","        plt.xlabel(\"Customers\")\n","        plt.ylabel(\"Balance\")\n","        plt.show()\n","\n","    def log_transactions(self):\n","        for transaction in self.transactions:\n","            print(transaction)"]},{"cell_type":"code","execution_count":24,"metadata":{},"outputs":[],"source":["import matplotlib.pyplot as plt\n","\n","class BankAccount:\n","    def __init__(self):\n","        self.transactions = []\n","\n","    def deposit(self, customer, amount):\n","        if amount > 0:\n","            customer.balance += amount\n","            transaction = Transaction(len(self.transactions) + 1, customer.customer_id, amount, 'Deposit')\n","            self.transactions.append(transaction)\n","            print(f\"Deposited {amount} to {customer.name}'s account. New Balance: {customer.balance}\")\n","        else:\n","            print(\"Deposit amount must be positive!\")\n","\n","    def withdraw(self, customer, amount):\n","        if amount > customer.balance:\n","            print(\"Insufficient funds!\")\n","        elif amount <= 0:\n","            print(\"Withdrawal amount must be positive!\")\n","        else:\n","            customer.balance -= amount\n","            transaction = Transaction(len(self.transactions) + 1, customer.customer_id, amount, 'Withdrawal')\n","            self.transactions.append(transaction)\n","            print(f\"Withdrew {amount} from {customer.name}'s account. New Balance: {customer.balance}\")\n","\n","    def track_balance_over_time(self, customer):\n","        balances = []\n","        for transaction in self.transactions:\n","            if transaction.customer_id == customer.customer_id:\n","                balances.append(customer.balance)\n","\n","        plt.plot(range(1, len(balances) + 1), balances, marker='o')\n","        plt.title(f\"{customer.name}'s Balance Over Time\")\n","        plt.xlabel(\"Transaction Number\")\n","        plt.ylabel(\"Balance\")\n","        plt.show()\n","\n","    def log_transactions(self):\n","        for transaction in self.transactions:\n","            print(transaction)\n"]},{"cell_type":"code","execution_count":25,"metadata":{},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":["import matplotlib.pyplot as plt\n","\n","def scatter_plot_transactions_vs_balance(customer_db, bank_account):\n","    names = []\n","    balances = []\n","    transaction_counts = []\n","\n","    for customer in customer_db.customers:\n","        names.append(customer.name)\n","        balances.append(customer.balance)\n","        # Count how many transactions the customer has had\n","        transaction_count = sum(1 for t in bank_account.transactions if t.customer_id == customer.customer_id)\n","        transaction_counts.append(transaction_count)\n","\n","    # Creating scatter plot\n","    plt.scatter(transaction_counts, balances)\n","    plt.title(\"Number of Transactions vs. Customer Balance\")\n","    plt.xlabel(\"Number of Transactions\")\n","    plt.ylabel(\"Balance\")\n","    plt.show()\n","\n","# Example usage\n","scatter_plot_transactions_vs_balance(customer_db, bank_account)\n"]},{"cell_type":"markdown","metadata":{},"source":["### Additional Exercise 4: Bar Chart After Every Transaction\n","* Modify the BankAccount class to include a method that generates a bar chart after each transaction, showing updated balances."]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["import matplotlib.pyplot as plt\n","\n","class BankAccount:\n","    def __init__(self):\n","        self.transactions = []\n","\n","    def deposit(self, customer, amount):\n","        if amount > 0:\n","            customer.balance += amount\n","            transaction = Transaction(len(self.transactions) + 1, customer.customer_id, amount, 'Deposit')\n","            self.transactions.append(transaction)\n","            print(f\"Deposited {amount} to {customer.name}'s account. New Balance: {customer.balance}\")\n","            self.plot_balances()  # Call the new method after each transaction\n","        else:\n","            print(\"Deposit amount must be positive!\")\n","\n","    def withdraw(self, customer, amount):\n","        if amount > customer.balance:\n","            print(\"Insufficient funds!\")\n","        elif amount <= 0:\n","            print(\"Withdrawal amount must be positive!\")\n","        else:\n","            customer.balance -= amount\n","            transaction = Transaction(len(self.transactions) + 1, customer.customer_id, amount, 'Withdrawal')\n","            self.transactions.append(transaction)\n","            print(f\"Withdrew {amount} from {customer.name}'s account. New Balance: {customer.balance}\")\n","            self.plot_balances()  # Call the new method after each transaction\n","\n","    def plot_balances(self):\n","        # Plotting customer balances after each transaction\n","        customers = customer_db.customers\n","        names = [customer.name for customer in customers]\n","        balances = [customer.balance for customer in customers]\n","\n","        plt.bar(names, balances)\n","        plt.title(\"Customer Balances After Transaction\")\n","        plt.xlabel(\"Customers\")\n","        plt.ylabel(\"Balance\")\n","        plt.show()\n","\n","    def log_transactions(self):\n","        for transaction in self.transactions:\n","            print(transaction)"]},{"cell_type":"markdown","metadata":{},"source":["### Additional Exercise 5: Line Chart to Track a Customerâ€™s Balance Over Time\n","This solution tracks balance changes for a specific customer after each transaction."]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["import matplotlib.pyplot as plt\n","\n","class BankAccount:\n","    def __init__(self):\n","        self.transactions = []\n","\n","    def deposit(self, customer, amount):\n","        if amount > 0:\n","            customer.balance += amount\n","            transaction = Transaction(len(self.transactions) + 1, customer.customer_id, amount, 'Deposit')\n","            self.transactions.append(transaction)\n","            print(f\"Deposited {amount} to {customer.name}'s account. New Balance: {customer.balance}\")\n","        else:\n","            print(\"Deposit amount must be positive!\")\n","\n","    def withdraw(self, customer, amount):\n","        if amount > customer.balance:\n","            print(\"Insufficient funds!\")\n","        elif amount <= 0:\n","            print(\"Withdrawal amount must be positive!\")\n","        else:\n","            customer.balance -= amount\n","            transaction = Transaction(len(self.transactions) + 1, customer.customer_id, amount, 'Withdrawal')\n","            self.transactions.append(transaction)\n","            print(f\"Withdrew {amount} from {customer.name}'s account. New Balance: {customer.balance}\")\n","\n","    def track_balance_over_time(self, customer):\n","        balances = []\n","        for transaction in self.transactions:\n","            if transaction.customer_id == customer.customer_id:\n","                balances.append(customer.balance)\n","\n","        plt.plot(range(1, len(balances) + 1), balances, marker='o')\n","        plt.title(f\"{customer.name}'s Balance Over Time\")\n","        plt.xlabel(\"Transaction Number\")\n","        plt.ylabel(\"Balance\")\n","        plt.show()\n","\n","    def log_transactions(self):\n","        for transaction in self.transactions:\n","            print(transaction)\n"]},{"cell_type":"markdown","metadata":{},"source":["### Additional Exercise 3: Scatter Plot of Number of Transactions vs. Total Balance\n","This exercise shows a scatter plot comparing the number of transactions for each customer against their total balance."]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["import matplotlib.pyplot as plt\n","\n","def scatter_plot_transactions_vs_balance(customer_db, bank_account):\n","    names = []\n","    balances = []\n","    transaction_counts = []\n","\n","    for customer in customer_db.customers:\n","        names.append(customer.name)\n","        balances.append(customer.balance)\n","        # Count how many transactions the customer has had\n","        transaction_count = sum(1 for t in bank_account.transactions if t.customer_id == customer.customer_id)\n","        transaction_counts.append(transaction_count)\n","\n","    # Creating scatter plot\n","    plt.scatter(transaction_counts, balances)\n","    plt.title(\"Number of Transactions vs. Customer Balance\")\n","    plt.xlabel(\"Number of Transactions\")\n","    plt.ylabel(\"Balance\")\n","    plt.show()\n","\n","# Example usage\n","scatter_plot_transactions_vs_balance(customer_db, bank_account)\n"]},{"cell_type":"markdown","metadata":{},"source":["\n","### Further Reading and Resources\n","\n","- **Online Courses**:\n","  - [Coursera: Python for Everybody](https://www.coursera.org/specializations/python)\n","  - [edX: Introduction to Computer Science and Programming Using Python](https://www.edx.org/course/introduction-to-computer-science-and-programming-using-python)\n","\n","- **Documentation**:\n","  - [Python Official Documentation](https://docs.python.org/3/)\n","  - [Matplotlib Documentation](https://matplotlib.org/stable/contents.html)\n","  - [PEP 8 Style Guide](https://pep8.org/)\n","  - [Python OOP Tutorial](https://realpython.com/python3-object-oriented-programming/)\n","\n","- **Communities**:\n","  - [Stack Overflow](https://stackoverflow.com/) - A great place to ask questions and find answers.\n","  - [Reddit - Learn Python](https://www.reddit.com/r/learnpython/) - A community for Python learners."]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.9"}},"nbformat":4,"nbformat_minor":2}
