class Customer:
    def __init__(self, customer_id, name):
        self.customer_id = customer_id
        self.name = name
        self.balance = 0.0

    def display_info(self):
        return f"Customer ID: {self.customer_id}, Name: {self.name}, Balance: {self.balance}"


class Transaction:
    def __init__(self, transaction_id, customer_id, amount, transaction_type):
        self.transaction_id = transaction_id
        self.customer_id = customer_id
        self.amount = amount
        self.transaction_type = transaction_type

    def __str__(self):
        return f"Transaction ID: {self.transaction_id}, Customer ID: {self.customer_id}, Amount: {self.amount}, Type: {self.transaction_type}"


class BankAccount:
    def __init__(self):
        self.transactions = []

    def deposit(self, customer, amount):
        if amount <= 0:
            print("Deposit amount must be positive!")
        else:
            customer.balance += amount
            transaction = Transaction(len(self.transactions) + 1, customer.customer_id, amount, 'Deposit')
            self.transactions.append(transaction)
            print(f"Deposited ${amount} to {customer.name}'s account. New Balance: ${customer.balance:.2f}")

    def withdraw(self, customer, amount):
        if amount > customer.balance:
            print("Insufficient funds!")
        else:
            customer.balance -= amount
            transaction = Transaction(len(self.transactions) + 1, customer.customer_id, amount, 'Withdrawal')
            self.transactions.append(transaction)
            print(f"Withdrew ${amount} from {customer.name}'s account. New Balance: ${customer.balance:.2f}")

    def log_transactions(self):
        if not self.transactions:
            print("No transactions yet.")
        for transaction in self.transactions:
            print(transaction)



class CustomerDatabase:
    def __init__(self):
        self.customers = []

    def add_customer(self, customer):
        self.customers.append(customer)
        print(f"Added customer: {customer.display_info()}")

    def get_customer_by_id(self, customer_id):
        for customer in self.customers:
            if customer.customer_id == customer_id:
                return customer
        return None


def main_menu():
    print("\n--- Bank System ---")
    print("1. Add Customer")
    print("2. Deposit Money")
    print("3. Withdraw Money")
    print("4. Show All Customers")
    print("5. Log Transactions")
    print("6. Exit")
    return input("Select an option: ")


def run_banking_system():
    # Initialize the database and bank account
    customer_db = CustomerDatabase()
    bank_account = BankAccount()

    while True:
        option = main_menu()

        if option == "1":
            # Add Customer
            customer_id = input("Enter customer ID: ")
            name = input("Enter customer name: ")
            new_customer = Customer(customer_id, name)
            customer_db.add_customer(new_customer)

        elif option == "2":
            # Deposit Money
            customer_id = input("Enter customer ID for deposit: ")
            customer = customer_db.get_customer_by_id(customer_id)
            if customer:
                amount = float(input(f"Enter amount to deposit for {customer.name}: "))
                bank_account.deposit(customer, amount)
            else:
                print("Customer not found!")

        elif option == "3":
            # Withdraw Money
            customer_id = input("Enter customer ID for withdrawal: ")
            customer = customer_db.get_customer_by_id(customer_id)
            if customer:
                amount = float(input(f"Enter amount to withdraw for {customer.name}: "))
                bank_account.withdraw(customer, amount)
            else:
                print("Customer not found!")

        elif option == "4":
            # Show All Customers
            print("\n--- Customer List ---")
            if customer_db.customers:
                for customer in customer_db.customers:
                    print(customer.display_info())
            else:
                print("No customers available.")

        elif option == "5":
            # Log Transactions
            print("\n--- Transaction Log ---")
            bank_account.log_transactions()

        elif option == "6":
            # Exit the system
            print("Exiting the banking system. Goodbye!")
            break

        else:
            print("Invalid option. Please try again.")

# Run the program in the terminal
if __name__ == "__main__":
    run_banking_system()
